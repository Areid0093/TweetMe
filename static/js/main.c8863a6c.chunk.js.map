{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","display","setLikes","userLike","setUserLike","actionDisplay","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8863a6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react'\nimport { loadTweets } from '../lookup'\n\nexport function TweetComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 12313\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n  }\n  return (\n    <div className={props.className}>\n      <div className='col-12 mb-3'>\n        <form onSubmit={handleSubmit}>\n          <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\n          <button type='submit' className='btn btn-primary my-3'>\n            Tweet\n          </button>\n        </form>\n      </div>\n        <TweetsList newTweets={newTweets} />\n    </div>\n  )\n}\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n        setTweets(final)\n    }\n  }, [props.newTweets, tweets, tweetsInit])\n\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweetsInit(response)\n      } else {\n        alert('There was an error')\n      }\n    }\n    loadTweets(myCallback)\n  }, [])\n  return tweets.map((item, index) => {\n    return (\n      <Tweet\n        tweet={item}\n        className='my-5 py-5 border bg-white text-dark'\n        key={`${index}-{item.id}`}\n      />\n    )\n  })\n}\n\nexport function Tweet(props) {\n  const { tweet } = props\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n  return (\n    <div className={className}>\n      <p> {tweet.id} - {tweet.content} </p>\n      <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{ type: 'like', display: 'Likes' }} />\n        <ActionBtn tweet={tweet} action={{ type: 'unlike', display: 'Unlike' }} />\n        <ActionBtn tweet={tweet} action={{ type: 'retweet', display: 'Retweet' }} />\n      </div>\n    </div>\n  )\n}\n\nexport function ActionBtn(props) {\n  const { tweet, action } = props\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n  const [userLike, setUserLike] = useState(\n    tweet.userLike === true ? true : false\n  )\n  const className = props.className ? props.className : 'btn btn-primary btn-sm'\n  const actionDisplay = action.display ? action.display : 'Action'\n  const handleClick = (event) => {\n    event.preventDefault()\n    if (action.type === 'like') {\n      if (userLike === true) {\n        setLikes(likes - 1)\n        setUserLike(false)\n      } else {\n        setLikes(likes + 1)\n        setUserLike(true)\n      }\n    }\n  }\n  const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n  return (\n    <button className={className} onClick={handleClick}>\n      {display}\n    </button>\n  )\n}","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://localhost:8000/api/tweets'\n    const responseType = 'json'\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({'message': 'The request was an error'}, 400)\n    }\n    xhr.send()\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetComponent} from './tweets'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById('tweetme')\nif (tweetsEl) {\n  ReactDOM.render(<TweetComponent />, tweetsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}